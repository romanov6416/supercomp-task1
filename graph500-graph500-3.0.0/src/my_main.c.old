#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS
#endif
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif
#include "../generator/make_graph.h"
#include "../generator/utils.h"
#include "aml.h"
#include "common.h"
#include <math.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <stddef.h>
#include <stdio.h>
#include <limits.h>
#include <stdint.h>
#include <inttypes.h>


#define MAX_ATTEMPS 50

static int compare_doubles(const void* a, const void* b) {
	double aa = *(const double*)a;
	double bb = *(const double*)b;
	return (aa < bb) ? -1 : (aa == bb) ? 0 : 1;
}

enum {s_minimum, s_firstquartile, s_median, s_thirdquartile, s_maximum, s_mean, s_std, s_LAST};
void get_statistics(const double x[], int n, volatile double r[s_LAST]) {
	double temp;
	int i;
	/* Compute mean. */
	temp = 0.0;
	for (i = 0; i < n; ++i) temp += x[i];
	temp /= n;
	r[s_mean] = temp;
	double mean = temp;
	/* Compute std. dev. */
	temp = 0;
	for (i = 0; i < n; ++i) temp += (x[i] - mean) * (x[i] - mean);
	temp /= n - 1;
	r[s_std] = sqrt(temp);
	/* Sort x. */
	double* xx = (double*)xmalloc(n * sizeof(double));
	memcpy(xx, x, n * sizeof(double));
	qsort(xx, n, sizeof(double), compare_doubles);
	/* Get order statistics. */
	r[s_minimum] = xx[0];
	r[s_firstquartile] = (xx[(n - 1) / 4] + xx[n / 4]) * .5;
	r[s_median] = (xx[(n - 1) / 2] + xx[n / 2]) * .5;
	r[s_thirdquartile] = (xx[n - 1 - (n - 1) / 4] + xx[n - 1 - n / 4]) * .5;
	r[s_maximum] = xx[n - 1];
	/* Clean up. */
	free(xx);
}

int main(int argc, char** argv) {

	aml_init(&argc,&argv); //includes MPI_Init inside
	setup_globals();

	if (argc != 5) {
		fprintf(stderr, "Usage: <prog> path_to_edges path_to_weights edges_number vertices_number\n");
		fprintf(stderr, "5 arguments\n");
		return 1;
	}

	//printf("load cmd parameters\n");
	const char* path_to_edges = argv[1];
	const char* path_to_weights = argv[2];
	int64_t number_of_edges = (int64_t)atoi(argv[3]);
	int64_t nglobalverts = (int64_t)atoi(argv[4]);
//	printf("output number_of_edges %d\n", (int) number_of_edges);
//	printf("argv[3] %s\n", argv[3]);
//	printf("argv[4] %s\n", argv[4]);

	//printf("load tuple graph\n");
	tuple_graph tg;
	tg.data_in_file = 1; // 1 for file, 0 for memory
	tg.write_file = 0; // 1 if the file needs written, 0 if re-used and read
	tg.edgememory = NULL; //NULL if edges are in file
	tg.edgememory_size = 0;
	tg.max_edgememory_size = 0;
//    MPI_File edgefile; //  Or MPI_FILE_NULL if edges are in memory 
	tg.weightmemory = NULL;
	tg.nglobaledges = number_of_edges; // Number of edges in graph, in both cases
	tg.weightmemory = NULL;
	printf("rank = %d, number_of_edges = %d\n", rank, number_of_edges);

	int reuse_file = 1;
	const char * filename = path_to_edges;
	const char * wfilename = path_to_weights;
	int wmode;

	if (tg.data_in_file) {
		int is_opened = 0;
		int mode = MPI_MODE_RDWR | MPI_MODE_EXCL | MPI_MODE_UNIQUE_OPEN;
		if (!reuse_file) {
			mode |= MPI_MODE_CREATE | MPI_MODE_DELETE_ON_CLOSE;
		} else {
			MPI_File_set_errhandler(MPI_FILE_NULL, MPI_ERRORS_RETURN);
			if (MPI_File_open(MPI_COMM_WORLD, (char *) filename, mode,
			                  MPI_INFO_NULL, &tg.edgefile)) {
				if (0 == rank && getenv("VERBOSE"))
					fprintf(stderr, "%d: failed to open %s, creating\n",
					        rank, filename);
				mode |= MPI_MODE_RDWR | MPI_MODE_CREATE;
				wmode = mode;
			} else {
				MPI_Offset size;
				MPI_File_get_size(tg.edgefile, &size);
				if (size == tg.nglobaledges * sizeof(packed_edge)) {
					wmode = mode;
					if (MPI_File_open(MPI_COMM_WORLD, (char *) wfilename, mode, MPI_INFO_NULL, &tg.weightfile)) {
						wmode |= MPI_MODE_RDWR | MPI_MODE_CREATE;
						MPI_File_close(&tg.edgefile);
					} else { //both files were open succedfully
						is_opened = 1;
						tg.write_file = 0;
					}
				} else /* Size doesn't match, assume different parameters. */
					MPI_File_close(&tg.edgefile);
			}
		}
		MPI_File_set_errhandler(MPI_FILE_NULL, MPI_ERRORS_ARE_FATAL);
		if (!is_opened) {
			MPI_File_open(MPI_COMM_WORLD, (char*)filename, mode, MPI_INFO_NULL, &tg.edgefile);
			MPI_File_set_size(tg.edgefile, tg.nglobaledges * sizeof(packed_edge));
		}
		if (!is_opened) {
			MPI_File_open(MPI_COMM_WORLD, (char*)wfilename, wmode, MPI_INFO_NULL, &tg.weightfile);
			MPI_File_set_size(tg.weightfile, tg.nglobaledges * sizeof(float));
		}
		MPI_File_set_view(tg.weightfile, 0, MPI_FLOAT, MPI_FLOAT, "native", MPI_INFO_NULL);
		MPI_File_set_atomicity(tg.weightfile, 0);
		MPI_File_set_view(tg.edgefile, 0, packed_edge_mpi_type, packed_edge_mpi_type, "native", MPI_INFO_NULL);
		MPI_File_set_atomicity(tg.edgefile, 0);
	}


//	int ranks_per_row = ((nglobalverts + CHAR_BIT - 1) / CHAR_BIT + bitmap_size_in_bytes - 1) / bitmap_size_in_bytes;
//	int nrows = size / ranks_per_row;

	// copy and reformat code from main.c
//	MPI_Offset block_idx = 0;
//	MPI_Offset start_edge_index = int64_min(FILE_CHUNKSIZE * (block_idx * nrows + my_row), tg.nglobaledges);
//
//	MPI_File_read_at(tg.edgefile, start_edge_index, actual_buf, edge_count, packed_edge_mpi_type, MPI_STATUS_IGNORE);
//	MPI_File_read_at(tg.weightfile, start_edge_index, actual_wbuf, edge_count, MPI_FLOAT, MPI_STATUS_IGNORE);
//
//
//	MPI_Allreduce(&tg.edgememory_size, &tg.max_edgememory_size, 1, MPI_INT64_T, MPI_MAX, MPI_COMM_WORLD);
//	if (tg.data_in_file && tg.write_file) {
//		MPI_File_sync(tg.edgefile);
//		MPI_File_sync(tg.weightfile);
//	}






//    const char* filename = getenv("TMPFILE");
//    const int reuse_file = getenv("REUSEFILE")? 1 : 0;
	// If filename is NULL, store data in memory


//    tg.data_in_file = (filename != NULL);
//    tg.write_file = 1;

	//printf("open files\n");
	int mode = MPI_MODE_RDWR | MPI_MODE_EXCL | MPI_MODE_UNIQUE_OPEN;
	MPI_File_set_errhandler(MPI_FILE_NULL, MPI_ERRORS_RETURN);
	if (MPI_File_open(MPI_COMM_WORLD, (char*)path_to_edges, mode,
					  MPI_INFO_NULL, &tg.edgefile)) {
		if (0 == rank && getenv("VERBOSE"))
			fprintf (stderr, "%d: failed to open %s, creating\n",
					 rank, path_to_edges);
		mode |= MPI_MODE_RDWR | MPI_MODE_CREATE;
		wmode=mode;
	}
	if(MPI_File_open(MPI_COMM_WORLD, (char*)path_to_weights, mode, MPI_INFO_NULL, &tg.weightfile)){
		if (0 == rank && getenv("VERBOSE"))
			fprintf (stderr, "%d: failed to open %s, creating\n",
					 rank, path_to_weights);
	}

	double data_struct_start = MPI_Wtime();
	//printf("load user graph structure\n");
	make_graph_data_structure(&tg);
	double data_struct_stop = MPI_Wtime();
	uint64_t nlocalverts = get_nlocalverts_for_pred();
	printf("rank = %d, nlocalverts = %d\n", rank, nlocalverts);
	int64_t* pred = (int64_t*)xMPI_Alloc_mem(nlocalverts * sizeof(int64_t));
	float* shortest = (float*)xMPI_Alloc_mem(nlocalverts * sizeof(float));


//	float * total_shortest = NULL;
//	int64_t * total_pred = NULL;
//	//printf("run algo");
//	if(rank == 0) {
//		total_pred = (int64_t*) xMPI_Alloc_mem(4 * number_of_edges * sizeof(int64_t));
//		total_shortest = (float*) xMPI_Alloc_mem(4 * number_of_edges * sizeof(float));
//	}

	double sssp_time[MAX_ATTEMPS];
	int i;
	for (i = 0; i < MAX_ATTEMPS; ++i) {
		clean_shortest(shortest);
		clean_pred(pred);
		double sssp_start = MPI_Wtime();
		run_sssp(0, &pred[0],shortest);
		double sssp_stop = MPI_Wtime();
		sssp_time[i] = sssp_stop - sssp_start;
	}
	// print result times
	if (rank == 0) {
		for (i = 0; i < MAX_ATTEMPS; ++i) {
			printf("%f\n", sssp_time[i]);
		}
	}

	//MPI_Offset start_edge_index = FILE_CHUNKSIZE * rank, end_edge_index;
	//if (start_edge_index > tg.nglobaledges) {
	//    start_edge_index = tg.nglobaledges;
	//}
	//MPI_Offset block_limit = ITERATE_TUPLE_GRAPH_BLOCK_COUNT(&tg);
	//printf("block_limit=%d", block_limit);
	//start_edge_index = FILE_CHUNKSIZE * (MUL_SIZE(0) + rank);
	//int64_t edge_count_i = tg.nglobaledges - start_edge_index;
	//printf("edge_count_i=%d", edge_count_i);
	//printf("start_edge_index=%d,", start_edge_index);
	//end_edge_index = start_edge_index + FILE_CHUNKSIZE;
	//printf("end_edge_index=%d,", end_edge_index);
	//printf("end_edge_count=%d,", end_edge_index - start_edge_index);

	//int64_t edge_count_i = end_edge_index - start_edge_index;


	for (i = 0; i < nlocalverts; ++i) {
		printf("%d %d\n", VERTEX_TO_GLOBAL(rank, i), pred[i]);
	}
	//sssp_times[bfs_root_idx] = sssp_stop - sssp_start;


	MPI_Free_mem(pred);
	MPI_Free_mem(shortest);
	free_graph_data_structure();

	if (tg.data_in_file) {
		MPI_File_close(&tg.edgefile);
		MPI_File_close(&tg.weightfile);
	}

	cleanup_globals();
	aml_finalize(); //includes MPI_Finalize()

	return 0;
}
